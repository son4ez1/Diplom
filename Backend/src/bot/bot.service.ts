import { Injectable, NotFoundException } from '@nestjs/common';
import escapeMarkdownV2 from 'common/func/escaping';
import { Action, Ctx, Start, Update, On } from 'nestjs-telegraf';
import { StudentService } from 'src/student/student.service';
import { Markup, Context } from 'telegraf';

@Update()
@Injectable()
export class BotService {
  constructor(private studentService: StudentService) {}

  private messageId: number;
  private fio: string;
  private password: string;
  private isAwaitingPassword = false; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–∞—Ä–æ–ª—è

  @Start()
  private async startBot(@Ctx() ctx: Context, isEditing: boolean = false) {
    let student;

    try {
      student = await this.studentService.findByTelegram(ctx.from.id);
    } catch (error) {
      if (error instanceof NotFoundException) {
        // –ï—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å student –∫–∞–∫ undefined
        student = undefined;
      } else {
        // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        throw error;
      }
    }
    const user = ctx.from;
    const baseUrl = 'https://r6nt2plp-3001.asse.devtunnels.ms/login';
    const queryParams = student
      ? `?login=${student.login}&password=${student.password}`
      : '';

    const finalUrl = baseUrl + queryParams;
    const WelcomingMessage = student
      ? `
üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ\\, ${student.last_name} ${student.first_name} ${student.patronymic}\\!* üåü

–ú—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –≤–∞—Å –≤ —Å–∏—Å—Ç–µ–º–µ\\. –í–æ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ\\:
  *–õ–æ–≥–∏–Ω:* ${escapeMarkdownV2(student.login)}
  *–ü–∞—Ä–æ–ª—å:* ||${escapeMarkdownV2(student.password)}||

_‚Üì –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É\\, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç\\ ‚Üì_
    `
      : `
üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å\\, ${user.first_name ? user.first_name : ''}${user.last_name ? ' ' + user.last_name : ''}\\!* üåü

üìù *–ö–∞–∫ –Ω–∞—á–∞—Ç—å\\?*
–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∂–µ —Å–≤–æ—ë –§–ò–û –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

_‚Üì –¢–∞–∫ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç\\, –ø–æ –∫–Ω–æ–ø–∫–µ ‚Üì_
    `;

    const message = await ctx.reply(WelcomingMessage, {
      parse_mode: 'MarkdownV2',
      ...Markup.inlineKeyboard([
        [Markup.button.url('üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', finalUrl)],
      ]),
    });
    this.messageId = message.message_id;
  }

  @On('text')
  private async handleText(@Ctx() ctx: Context) {
    const message = ctx.message;

    if (this.isAwaitingPassword) {
      // –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è
      await this.handlePassword(ctx);
      return;
    }

    if (this.isTextMessage(message)) {
      const text = message.text;
      const fioRegex = /^[–ê-–Ø–Å–∞-—è—ë]+\s[–ê-–Ø–Å–∞-—è—ë]+\s[–ê-–Ø–Å–∞-—è—ë]+$/;

      const loadingStates: string[] = [];
      const baseLoadingText = '‚è≥ –ó–ê–ì–†–£–ó–ö–ê';
      const totalSteps = 3 * 1;
      const maxDots = 3;

      for (let i = 0; i < totalSteps; i++) {
        const dots = '.'.repeat(i % (maxDots + 1));
        const escapedDots = dots.replace(/\./g, '\\.');
        loadingStates.push(`${baseLoadingText}${escapedDots}`);
      }

      for (const state of loadingStates) {
        await ctx.telegram.editMessageText(
          message.chat.id,
          this.messageId,
          undefined,
          state,
          { parse_mode: 'MarkdownV2' },
        );
        await this.sleep(100);
      }

      if (fioRegex.test(text)) {
        this.fio = text;
        await ctx.telegram.editMessageText(
          message.chat.id,
          this.messageId,
          undefined,
          `
‚úÖ *–°–ø–∞—Å–∏–±–æ\\, ${text}\\! –í–∞—à–µ –§–ò–û –ø—Ä–∏–Ω—è—Ç–æ\\!*
          
üëÄ *–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å—ë –≤–µ—Ä–Ω–æ\\.*
–£–±–µ–¥–∏—Ç–µ—Å—å\\, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∞—à–µ –∏–º—è\\.
          `,
          {
            parse_mode: 'MarkdownV2',
            ...Markup.inlineKeyboard([
              [
                Markup.button.callback('‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ', 'confirm_fio'),
                Markup.button.callback('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', 'edit_start'), // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ 'edit_start'
              ],
            ]),
          },
        );
      } else {
        await ctx.telegram.editMessageText(
          message.chat.id,
          this.messageId,
          undefined,
          `
‚ùå *–§–ò–û –Ω–∞–±—Ä–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ\\. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–Ω–æ–≤–∞\\.*

‚ùì *–ß—Ç–æ –Ω–µ —Ç–∞–∫\\?*
–£–±–µ–¥–∏—Ç–µ—Å—å\\, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ\\.

_–ù–∞–ø—Ä–∏–º–µ—Ä: __–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á___
          `,
          {
            parse_mode: 'MarkdownV2',
            ...Markup.inlineKeyboard([
              [Markup.button.callback('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', 'return_to_start')], // –û—Å—Ç–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –µ—Å—Ç—å
            ]),
          },
        );
      }
    } else {
      await ctx.reply(
        '‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞\\, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–∏–º –§–ò–û\\.',
      );
    }
  }

  @Action('confirm_fio')
  private async confirmFio(@Ctx() ctx: Context) {
    try {
      const student = await this.studentService.findByNames(this.fio);

      if (student.telegram && student.telegram.telegram_id) {
        await ctx.editMessageText(
          '‚ùó *–°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –§–ò–û*',
          {
            parse_mode: 'MarkdownV2',
            ...Markup.inlineKeyboard([
              [Markup.button.callback('üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞', 'return_to_start')],
            ]),
          },
        );
        return;
      }

      await ctx.editMessageText(
        '‚úÖ *–î–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã\\.* –ù–∞–∂–º–∏—Ç–µ \\"–°–æ–∑–¥–∞—Ç—å –ø–∞—Ä–æ–ª—å\\", —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å\\.',
        {
          parse_mode: 'MarkdownV2',
          ...Markup.inlineKeyboard([
            [Markup.button.callback('üîë –°–æ–∑–¥–∞—Ç—å –ø–∞—Ä–æ–ª—å', 'create_password')],
          ]),
        },
      );
    } catch (error) {
      console.error('Error finding student:', error.message);

      if (error instanceof NotFoundException) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ NotFoundException
        await ctx.editMessageText(
          '‚ùå –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω\\. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ\\, –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é\\.',
          {
            parse_mode: 'MarkdownV2',
            ...Markup.inlineKeyboard([
              [Markup.button.callback('üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞', 'return_to_start')],
            ]),
          },
        );
      } else {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
        await ctx.reply(
          '‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\\.',
          { parse_mode: 'MarkdownV2' },
        );
      }
    }
  }

  @Action('create_password')
  private async createPassword(@Ctx() ctx: Context) {
    await ctx.answerCbQuery();
    this.isAwaitingPassword = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è
    await ctx.editMessageText('üîê *–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –Ω–∏–∂–µ*', {
      parse_mode: 'MarkdownV2',
    });
  }

  private async handlePassword(@Ctx() ctx: Context) {
    const message = ctx.message;

    if (this.isTextMessage(message)) {
      const password = message.text;

      // Regex for Latin letters, numbers, and special characters, with length 4-16
      const passwordRegex = /^[\x21-\x7E]{4,16}$/;

      if (!passwordRegex.test(password)) {
        this.isAwaitingPassword = true; // Keep awaiting password input
        const replyMessage = await ctx.reply(
          `‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã\\, —Ü–∏—Ñ—Ä—ã –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –±—ã—Ç—å –æ—Ç 4 –¥–æ 16 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª–∏–Ω–æ–π\\.

–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∑–∞–Ω–æ–≤–æ ‚Üì`,
          { parse_mode: 'MarkdownV2' },
        );
        this.messageId = replyMessage.message_id; // Update messageId
        return;
      }

      // If valid, set the password and proceed
      this.password = password;
      this.isAwaitingPassword = false; // Reset password state

      // Check if this.messageId is defined before using it
      if (!this.messageId) {
        console.error('Error: messageId is undefined.');
        return;
      }

      // Attempt to edit message text for confirmation
      const confirmationMessage = await ctx.telegram.editMessageText(
        message.chat.id,
        this.messageId,
        undefined,
        `
üîë *–í—Å—ë –≤–µ—Ä–Ω–æ\\?*
–í–∞—à –ø–∞—Ä–æ–ª—å: ||${escapeMarkdownV2(this.password)}||
            `,
        {
          parse_mode: 'MarkdownV2',
          ...Markup.inlineKeyboard([
            [Markup.button.callback('‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ', 'confirm_password')],
            [Markup.button.callback('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', 'edit_password')],
          ]),
        },
      );

      // Debugging: Log the confirmation message response
      console.log('Confirmation message response:', confirmationMessage);
    }
  }

  @Action('edit_password')
  private async editPassword(@Ctx() ctx: Context) {
    await ctx.answerCbQuery();
    this.isAwaitingPassword = true; // –°–Ω–æ–≤–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è
    await ctx.editMessageText(
      '‚úèÔ∏è *–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –µ—â—ë —Ä–∞–∑\\, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ*',
      { parse_mode: 'MarkdownV2' },
    );
  }

  @Action('confirm_password')
  private async confirmPassword(@Ctx() ctx: Context) {
    await ctx.answerCbQuery();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–≤–µ–¥–µ–Ω –ª–∏ –ø–∞—Ä–æ–ª—å
    if (!this.password) {
      await ctx.reply(
        '‚ùó –ü–∞—Ä–æ–ª—å –Ω–µ –±—ã–ª –≤–≤–µ–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.',
        { parse_mode: 'MarkdownV2' },
      );
      return;
    }
    let student;
    // –ò—â–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ –§–ò–û
    try {
      student = await this.studentService.findByNames(this.fio);
    } catch (error) {
      return await ctx.editMessageText(
        '‚ùå –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ, –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é.',
        { parse_mode: 'MarkdownV2' },
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ Telegram –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const telegramData = {
      telegram_id: ctx.from.id,
      username: ctx.from.username || '',
      first_name: ctx.from.first_name || '',
      language_code: ctx.from.language_code || 'en',
      is_bot: ctx.from.is_bot,
    };

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
    await this.studentService.updateStudentTelegramAndPassword(
      student.id,
      telegramData,
      this.password,
    );

    const escapedLogin = escapeMarkdownV2(student.login);
    const escapedPassword = escapeMarkdownV2(this.password);

    // –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º –ª–æ–≥–∏–Ω–æ–º –∏ –ø–∞—Ä–æ–ª–µ–º
    const baseUrl = 'https://r6nt2plp-3001.asse.devtunnels.ms/login';
    const queryParams = student
      ? `?login=${student.login}&password=${student.password}`
      : '';

    const finalUrl = baseUrl + queryParams;
    await ctx.editMessageText(
      // `‚úÖ *–í–∞—à –ª–æ–≥–∏–Ω: ${escapedLogin}, –≤–∞—à –ø–∞—Ä–æ–ª—å: ${escapedPassword}*`

      `
üåü *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ\\!* üåü

–ú—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –≤–∞—Å –≤ —Å–∏—Å—Ç–µ–º–µ\\. –í–æ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ\\:
  *–õ–æ–≥–∏–Ω:* ${escapedLogin}
  *–ü–∞—Ä–æ–ª—å:* ||${escapedPassword}||

_‚Üì –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É\\, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç\\ ‚Üì_
    `,
      {
        parse_mode: 'MarkdownV2',
        ...Markup.inlineKeyboard([
          [Markup.button.url('üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', finalUrl)],
        ]),
      },
    );

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    this.fio = '';
    this.password = '';
  }

  private isTextMessage(message: any): message is { text: string } {
    return typeof message?.text === 'string';
  }

  private sleep(ms: number): Promise<void> {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }

  @Action('return_to_start')
  private async returnToStart(@Ctx() ctx: Context) {
    await ctx.answerCbQuery();

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    this.fio = '';
    this.password = '';
    this.isAwaitingPassword = false;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ
    await this.startBot(ctx);
  }

  @Action('edit_start') // –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  private async editStart(@Ctx() ctx: Context) {
    await ctx.answerCbQuery();

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    this.password = '';
    this.isAwaitingPassword = false;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –§–ò–û
    await ctx.editMessageText('‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –≤–∞—à–µ –§–ò–û –Ω–∏–∂–µ*', {
      parse_mode: 'MarkdownV2',
    });

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –§–ò–û —Å–Ω–æ–≤–∞
    // –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑–≤–∞—Ç—å handleText –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π –º–µ—Ç–æ–¥
  }
}
